"use strict";(self.webpackChunknadoo_io=self.webpackChunknadoo_io||[]).push([[383],{"./packages/ui-components/src/stories/design-system/MultilineTextField.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,RowVariations:()=>RowVariations,States:()=>States,StyleVariations:()=>StyleVariations,WithClearButton:()=>WithClearButton,WithHelpAndError:()=>WithHelpAndError,WithRadixForm:()=>WithRadixForm,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var _Default$parameters,_Default$parameters2,_RowVariations$parame,_RowVariations$parame2,_StyleVariations$para,_StyleVariations$para2,_States$parameters,_States$parameters2,_WithHelpAndError$par,_WithHelpAndError$par2,_WithClearButton$para,_WithClearButton$para2,_WithRadixForm$parame,_WithRadixForm$parame2,_Users_shkim_Documents_nadooio_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/defineProperty.js"),react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/next/dist/compiled/react/index.js"),_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./packages/ui-components/src/index.ts"),_radix_ui_react_form__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./node_modules/@radix-ui/react-form/dist/index.mjs"),__jsx=react__WEBPACK_IMPORTED_MODULE_0__.createElement;function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){(0,_Users_shkim_Documents_nadooio_node_modules_babel_runtime_helpers_esm_defineProperty_js__WEBPACK_IMPORTED_MODULE_1__.Z)(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}const __WEBPACK_DEFAULT_EXPORT__={title:"DesignSystem/Input/MultilineTextField",component:_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,parameters:{layout:"centered"},tags:["autodocs"],argTypes:{variant:{control:{type:"select"},options:Object.keys(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.Ux),description:"Text field style variation"},size:{control:{type:"select"},options:Object.keys(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.BX),description:"Text field size"},state:{control:{type:"select"},options:Object.keys(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.yy),description:"Text field state"},disabled:{control:"boolean",description:"Text field disabled status"},fullWidth:{control:"boolean",description:"Text field occupies full width"},required:{control:"boolean",description:"Required input status"},rows:{control:"number",description:"Number of rows in textarea"},onChange:{action:"changed"},onClear:{action:"cleared"}}};var Default={args:{label:"Multiline Input Field",placeholder:"Enter multiple lines of text",multiline:!0,rows:3,fullWidth:!0},parameters:{docs:{description:{story:"Set the `multiline` prop to true to render as a textarea for multiple lines. Use the `rows` prop to set the default number of rows."}}}},RowVariations={render:function render(){var _useState=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(""),value=_useState[0],setValue=_useState[1],handleChange=function handleChange(e){setValue(e.target.value)};return __jsx("div",{style:{display:"flex",flexDirection:"column",gap:"24px",width:"300px"}},__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"2-row TextField",placeholder:"Enter text for 2 rows",multiline:!0,rows:2,value,onChange:handleChange}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"4-row TextField",placeholder:"Enter text for 4 rows",multiline:!0,rows:4,value,onChange:handleChange}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"6-row TextField",placeholder:"Enter text for 6 rows",multiline:!0,rows:6,value,onChange:handleChange}))},parameters:{docs:{description:{story:"You can adjust the textarea height by setting different `rows` values."}}}},StyleVariations={render:function render(){return __jsx("div",{style:{display:"flex",flexDirection:"column",gap:"24px",width:"300px"}},__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Outlined Multiline",placeholder:"Outlined style multiline input",multiline:!0,rows:3,variant:"outlined"}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Filled Multiline",placeholder:"Filled style multiline input",multiline:!0,rows:3,variant:"filled"}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Underlined Multiline",placeholder:"Underlined style multiline input",multiline:!0,rows:3,variant:"underlined"}))},parameters:{docs:{description:{story:"Multiline fields can also use different `variant` styles. Each style follows the same design language as single-line fields."}}}},States={render:function render(){return __jsx("div",{style:{display:"flex",flexDirection:"column",gap:"24px",width:"300px"}},__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Default state",placeholder:"Default state multiline",multiline:!0,rows:3}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Hover state",placeholder:"Hover state multiline",multiline:!0,rows:3,state:"hover"}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Focus state",placeholder:"Focus state multiline",multiline:!0,rows:3,state:"focus"}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Disabled state",placeholder:"Disabled state multiline",multiline:!0,rows:3,disabled:!0}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Error state",placeholder:"Error state multiline",multiline:!0,rows:3,error:"An error occurred"}))}},WithHelpAndError={render:function render(){return __jsx("div",{style:{display:"flex",flexDirection:"column",gap:"24px",width:"300px"}},__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Multiline with help text",placeholder:"Please enter",multiline:!0,rows:3,helpText:"Up to 500 characters allowed."}),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Multiline with error",placeholder:"Please enter",multiline:!0,rows:3,error:"This field is required."}))}},WithClearButton={render:function render(){var _useState2=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)("Clearable multiline text"),value=_useState2[0],setValue=_useState2[1];return __jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{label:"Multiline with clear button",value,onChange:function handleChange(e){setValue(e.target.value)},clearButton:!0,onClear:function handleClear(){setValue("")},multiline:!0,rows:3,fullWidth:!0})}},WithRadixForm={render:function render(){return __jsx("div",{style:{width:"300px"}},__jsx(_radix_ui_react_form__WEBPACK_IMPORTED_MODULE_3__.fC,{onSubmit:function onSubmit(e){e.preventDefault(),alert("Form submitted!")}},__jsx("div",{style:{marginBottom:"16px"}},__jsx(_radix_ui_react_form__WEBPACK_IMPORTED_MODULE_3__.gN,{name:"name"},__jsx(_radix_ui_react_form__WEBPACK_IMPORTED_MODULE_3__.__,null,"Name"),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.fC,null,__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.II,{required:!0,placeholder:"Enter your name"})),__jsx(_radix_ui_react_form__WEBPACK_IMPORTED_MODULE_3__.v0,{match:"valueMissing"},"Please enter your name"))),__jsx("div",{style:{marginBottom:"16px"}},__jsx(_radix_ui_react_form__WEBPACK_IMPORTED_MODULE_3__.gN,{name:"message"},__jsx(_radix_ui_react_form__WEBPACK_IMPORTED_MODULE_3__.__,null,"Message"),__jsx(_nadoo_ui_components__WEBPACK_IMPORTED_MODULE_2__.nv,{multiline:!0,rows:4,placeholder:"Enter your message",fullWidth:!0,required:!0}),__jsx(_radix_ui_react_form__WEBPACK_IMPORTED_MODULE_3__.v0,{match:"valueMissing"},"Please enter your message"))),__jsx("button",{type:"submit",style:{backgroundColor:"var(--color-primary-500)",color:"white",padding:"8px 16px",borderRadius:"4px",border:"none",cursor:"pointer"}},"Submit")))}};Default.parameters=_objectSpread(_objectSpread({},Default.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_Default$parameters=Default.parameters)||void 0===_Default$parameters?void 0:_Default$parameters.docs),{},{source:_objectSpread({originalSource:"{\n  args: {\n    label: 'Multiline Input Field',\n    placeholder: 'Enter multiple lines of text',\n    multiline: true,\n    rows: 3,\n    fullWidth: true\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'Set the `multiline` prop to true to render as a textarea for multiple lines. Use the `rows` prop to set the default number of rows.'\n      }\n    }\n  }\n}"},null===(_Default$parameters2=Default.parameters)||void 0===_Default$parameters2||null===(_Default$parameters2=_Default$parameters2.docs)||void 0===_Default$parameters2?void 0:_Default$parameters2.source)})}),RowVariations.parameters=_objectSpread(_objectSpread({},RowVariations.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_RowVariations$parame=RowVariations.parameters)||void 0===_RowVariations$parame?void 0:_RowVariations$parame.docs),{},{source:_objectSpread({originalSource:"{\n  render: () => {\n    const [value, setValue] = useState<string>('');\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setValue(e.target.value);\n    };\n    return <div style={{\n      display: 'flex',\n      flexDirection: 'column',\n      gap: '24px',\n      width: '300px'\n    }}>\n        <TextField label=\"2-row TextField\" placeholder=\"Enter text for 2 rows\" multiline rows={2} value={value} onChange={handleChange} />\n        <TextField label=\"4-row TextField\" placeholder=\"Enter text for 4 rows\" multiline rows={4} value={value} onChange={handleChange} />\n        <TextField label=\"6-row TextField\" placeholder=\"Enter text for 6 rows\" multiline rows={6} value={value} onChange={handleChange} />\n      </div>;\n  },\n  parameters: {\n    docs: {\n      description: {\n        story: 'You can adjust the textarea height by setting different `rows` values.'\n      }\n    }\n  }\n}"},null===(_RowVariations$parame2=RowVariations.parameters)||void 0===_RowVariations$parame2||null===(_RowVariations$parame2=_RowVariations$parame2.docs)||void 0===_RowVariations$parame2?void 0:_RowVariations$parame2.source)})}),StyleVariations.parameters=_objectSpread(_objectSpread({},StyleVariations.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_StyleVariations$para=StyleVariations.parameters)||void 0===_StyleVariations$para?void 0:_StyleVariations$para.docs),{},{source:_objectSpread({originalSource:'{\n  render: () => <div style={{\n    display: \'flex\',\n    flexDirection: \'column\',\n    gap: \'24px\',\n    width: \'300px\'\n  }}>\n      <TextField label="Outlined Multiline" placeholder="Outlined style multiline input" multiline rows={3} variant="outlined" />\n      <TextField label="Filled Multiline" placeholder="Filled style multiline input" multiline rows={3} variant="filled" />\n      <TextField label="Underlined Multiline" placeholder="Underlined style multiline input" multiline rows={3} variant="underlined" />\n    </div>,\n  parameters: {\n    docs: {\n      description: {\n        story: \'Multiline fields can also use different `variant` styles. Each style follows the same design language as single-line fields.\'\n      }\n    }\n  }\n}'},null===(_StyleVariations$para2=StyleVariations.parameters)||void 0===_StyleVariations$para2||null===(_StyleVariations$para2=_StyleVariations$para2.docs)||void 0===_StyleVariations$para2?void 0:_StyleVariations$para2.source)})}),States.parameters=_objectSpread(_objectSpread({},States.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_States$parameters=States.parameters)||void 0===_States$parameters?void 0:_States$parameters.docs),{},{source:_objectSpread({originalSource:'{\n  render: () => <div style={{\n    display: \'flex\',\n    flexDirection: \'column\',\n    gap: \'24px\',\n    width: \'300px\'\n  }}>\n      <TextField label="Default state" placeholder="Default state multiline" multiline rows={3} />\n      <TextField label="Hover state" placeholder="Hover state multiline" multiline rows={3} state="hover" />\n      <TextField label="Focus state" placeholder="Focus state multiline" multiline rows={3} state="focus" />\n      <TextField label="Disabled state" placeholder="Disabled state multiline" multiline rows={3} disabled />\n      <TextField label="Error state" placeholder="Error state multiline" multiline rows={3} error="An error occurred" />\n    </div>\n}'},null===(_States$parameters2=States.parameters)||void 0===_States$parameters2||null===(_States$parameters2=_States$parameters2.docs)||void 0===_States$parameters2?void 0:_States$parameters2.source)})}),WithHelpAndError.parameters=_objectSpread(_objectSpread({},WithHelpAndError.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_WithHelpAndError$par=WithHelpAndError.parameters)||void 0===_WithHelpAndError$par?void 0:_WithHelpAndError$par.docs),{},{source:_objectSpread({originalSource:'{\n  render: () => <div style={{\n    display: \'flex\',\n    flexDirection: \'column\',\n    gap: \'24px\',\n    width: \'300px\'\n  }}>\n      <TextField label="Multiline with help text" placeholder="Please enter" multiline rows={3} helpText="Up to 500 characters allowed." />\n      <TextField label="Multiline with error" placeholder="Please enter" multiline rows={3} error="This field is required." />\n    </div>\n}'},null===(_WithHelpAndError$par2=WithHelpAndError.parameters)||void 0===_WithHelpAndError$par2||null===(_WithHelpAndError$par2=_WithHelpAndError$par2.docs)||void 0===_WithHelpAndError$par2?void 0:_WithHelpAndError$par2.source)})}),WithClearButton.parameters=_objectSpread(_objectSpread({},WithClearButton.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_WithClearButton$para=WithClearButton.parameters)||void 0===_WithClearButton$para?void 0:_WithClearButton$para.docs),{},{source:_objectSpread({originalSource:"{\n  render: () => {\n    const [value, setValue] = useState('Clearable multiline text');\n    const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      setValue(e.target.value);\n    };\n    const handleClear = () => {\n      setValue('');\n    };\n    return <TextField label=\"Multiline with clear button\" value={value} onChange={handleChange} clearButton onClear={handleClear} multiline rows={3} fullWidth />;\n  }\n}"},null===(_WithClearButton$para2=WithClearButton.parameters)||void 0===_WithClearButton$para2||null===(_WithClearButton$para2=_WithClearButton$para2.docs)||void 0===_WithClearButton$para2?void 0:_WithClearButton$para2.source)})}),WithRadixForm.parameters=_objectSpread(_objectSpread({},WithRadixForm.parameters),{},{docs:_objectSpread(_objectSpread({},null===(_WithRadixForm$parame=WithRadixForm.parameters)||void 0===_WithRadixForm$parame?void 0:_WithRadixForm$parame.docs),{},{source:_objectSpread({originalSource:"{\n  render: () => {\n    return <div style={{\n      width: '300px'\n    }}>\n        <Form.Root onSubmit={e => {\n        e.preventDefault();\n        alert('Form submitted!');\n      }}>\n          <div style={{\n          marginBottom: '16px'\n        }}>\n            <Form.Field name=\"name\">\n              <Form.Label>Name</Form.Label>\n              <Root>\n                <Input required placeholder=\"Enter your name\" />\n              </Root>\n              <Form.Message match=\"valueMissing\">\n                Please enter your name\n              </Form.Message>\n            </Form.Field>\n          </div>\n\n          <div style={{\n          marginBottom: '16px'\n        }}>\n            <Form.Field name=\"message\">\n              <Form.Label>Message</Form.Label>\n              <TextField multiline rows={4} placeholder=\"Enter your message\" fullWidth required />\n              <Form.Message match=\"valueMissing\">\n                Please enter your message\n              </Form.Message>\n            </Form.Field>\n          </div>\n\n          <button type=\"submit\" style={{\n          backgroundColor: 'var(--color-primary-500)',\n          color: 'white',\n          padding: '8px 16px',\n          borderRadius: '4px',\n          border: 'none',\n          cursor: 'pointer'\n        }}>\n            Submit\n          </button>\n        </Form.Root>\n      </div>;\n  }\n}"},null===(_WithRadixForm$parame2=WithRadixForm.parameters)||void 0===_WithRadixForm$parame2||null===(_WithRadixForm$parame2=_WithRadixForm$parame2.docs)||void 0===_WithRadixForm$parame2?void 0:_WithRadixForm$parame2.source)})});const __namedExportsOrder=["Default","RowVariations","StyleVariations","States","WithHelpAndError","WithClearButton","WithRadixForm"]}}]);